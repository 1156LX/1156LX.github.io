{"title":"最近点对问题","date":"2019-04-22T10:41:46.000Z","slug":"最近点对问题","updated":"2019-04-22T10:42:56.466Z","content":"<h1 id=\"分治算法求最近点对\"><a href=\"#分治算法求最近点对\" class=\"headerlink\" title=\"分治算法求最近点对\"></a>分治算法求最近点对</h1><h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目:\"></a>题目:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定的二维平面上有n个点，找其中的一对点，使得在n个点的所有点对中，该点对的距离最小；</span><br></pre></td></tr></table></figure>\n<h2 id=\"算法：\"><a href=\"#算法：\" class=\"headerlink\" title=\"算法：\"></a>算法：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.将平面上的点集S按x坐标排序后，若只有1个点，则返回；若有两个点，则直接计算两点距离为最近距离；若有三个点，则两两计算出距离，得到最近距离。</span><br><span class=\"line\"></span><br><span class=\"line\">2.若大于三个点，则将其线性分割成大小大致相等的2个子集S1，S2。</span><br><span class=\"line\"></span><br><span class=\"line\">3.最近点对只会出现在以下三种情况中：①点对在子集S1中；②点对在子集S2中；③一个点在S1中，另一个点在S3中。</span><br><span class=\"line\"></span><br><span class=\"line\">4.递归地在S1，S2上解最近点对问题，分别得到S1，S2中的最小距离d1,d2，取d1,d2中的最小距离d和点对。再找出跨越S1，S2的最近点对：合并S1，S2找到点集中x坐标在区间[mid-d,mid+d]范围内的所有点。</span><br><span class=\"line\"></span><br><span class=\"line\">5.按y坐标不减排序，循环每个点，找它后面7个点的最小距离，与d比较，比d小则更新d。最后即求得最近点对距离</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">point</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> x,y;</span><br><span class=\"line\">&#125;p[<span class=\"number\">100005</span>],temp[<span class=\"number\">100005</span>];</span><br><span class=\"line\"><span class=\"comment\">//x轴排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmpx</span><span class=\"params\">(point a,point b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x&lt;b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//y轴排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmpy</span><span class=\"params\">(point a,point b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.y&lt;b.y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//两点之间的距离</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">dis</span><span class=\"params\">(point a,point b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">closest</span><span class=\"params\">(<span class=\"keyword\">int</span> low,<span class=\"keyword\">int</span> hight)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(low+<span class=\"number\">1</span>==hight)<span class=\"keyword\">return</span> dis(p[low],p[hight]);<span class=\"comment\">//只有两个点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(low+<span class=\"number\">2</span>==hight)<span class=\"keyword\">return</span> min(dis(p[low],p[low+<span class=\"number\">1</span>]),min(dis(p[low+<span class=\"number\">1</span>],p[hight]),dis(p[low],p[hight])));<span class=\"comment\">//只有三个点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(low+hight)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//s1,s2集合的最短对距离d1,d2中最小的那个d;</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> d=min(closest(low,mid),closest(mid+<span class=\"number\">1</span>,hight));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//将集合中的点的x坐标位于[p[mid].x-d,p[mid].x+d]放入temp中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=low;i&lt;=hight;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p[i].x&gt;=p[mid].x-d&amp;&amp;p[i].x&lt;=p[mid].x+d)</span><br><span class=\"line\">            temp[k++]=p[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//对y坐标排序</span></span><br><span class=\"line\">    sort(temp,temp+k,cmpy);</span><br><span class=\"line\">    <span class=\"comment\">//循环每个点，找它后面7个点的最小距离，与d比较，比d小则更新d</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h=(i+<span class=\"number\">7</span>)&lt;k?(i+<span class=\"number\">7</span>):k;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;h;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp[j].y-temp[i].y&gt;=d)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            d=min(dis(temp[i],temp[j]),d);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        sort(p,p+n,cmpx);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.4lf\\n\"</span>,closest(<span class=\"number\">0</span>,n<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"快速排序","slug":"快速排序"},"next":{"title":"合并排序（分治法）","slug":"合并排序（分治法）"},"link":"http://starlx.cn/post/最近点对问题/","toc":[{"title":"分治算法求最近点对","id":"分治算法求最近点对","index":"1","children":[{"title":"题目:","id":"题目","index":"1.1"},{"title":"算法：","id":"算法：","index":"1.2"},{"title":"代码：","id":"代码：","index":"1.3"}]}]}