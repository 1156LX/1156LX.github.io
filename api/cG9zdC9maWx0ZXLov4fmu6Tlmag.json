{"title":"filter过滤器","date":"2019-04-13T08:17:02.000Z","slug":"filter过滤器","updated":"2019-04-13T08:19:04.683Z","content":"<h1 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h1><p>Filter是Servlet技术中最实用的技术，Web开发人员通过Filter技术，对web服务器管理的所有web资源：例如Jsp, Servlet, 静态图片文件或静态 html 文件等进行拦截，从而实现一些特殊的功能。例如实现URL级别的权限访问控制、过滤敏感词、压缩响应信息等一些高级功能。它主要用于对用户请求进行预处理，也可以对HttpServletResponse进行后处理。使用Filter的完整流程：Filter对用户请求进行预处理，接着将请求交给Servlet进行处理并生成响应，最后Filter再对服务器响应进行后处理。</p>\n<h1 id=\"2-功能\"><a href=\"#2-功能\" class=\"headerlink\" title=\"2.功能\"></a>2.功能</h1><p>处理全站中文乱码问题</p>\n<p>实现自动登录</p>\n<p>过滤敏感词汇</p>\n<p>压缩网页</p>\n<p>选择性让浏览器缓存</p>\n<h1 id=\"3-filter-链\"><a href=\"#3-filter-链\" class=\"headerlink\" title=\"3.filter 链\"></a>3.filter 链</h1><p>在web.xml中，我们知道，执行顺序是谁在前边执行谁。在spring boot中的FilterRegistrationBean注册过滤器的类中有个order属性。<br>这个order的默认值是Integer.MAX_VALUE 也就是int的最大值，spring boot 会按照order值的大小，从小到大的顺序来依次过滤。</p>\n<h1 id=\"4-spring-boot配置filter\"><a href=\"#4-spring-boot配置filter\" class=\"headerlink\" title=\"4.spring boot配置filter\"></a>4.spring boot配置filter</h1><h2 id=\"1-FilterRegistrationBean的方式\"><a href=\"#1-FilterRegistrationBean的方式\" class=\"headerlink\" title=\"1)FilterRegistrationBean的方式\"></a>1)FilterRegistrationBean的方式</h2><p>1、创建两个实现Filter接口的类filter1 、filter2<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lixin.study.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">filter1</span> <span class=\"title\">implements</span> <span class=\"title\">Filter</span></span>&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第一个过滤器创建\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第一个过滤器执行\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> destroy() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第一个过滤器销毁\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lixin.study.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">filter2</span> <span class=\"title\">implements</span> <span class=\"title\">Filter</span></span>&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第二个过滤器创建\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第二个过滤器执行\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> destroy() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第二个过滤器销毁\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、创建配置类　　　　　　<br>有多个filter就创建多个FilterRegistrationBean ，若需注明filter的执行顺序，可通过registration.setOrder(FilterRegistrationBean.LOWEST_PRECEDENCE - 1)配置，值越大，执行顺序越靠后<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lixin.study.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lixin.study.filter.filter1;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lixin.study.filter.filter2;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterConfig</span> </span>&#123;</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public FilterRegistrationBean companyUrlFilterRegister() &#123;</span><br><span class=\"line\">        FilterRegistrationBean registration = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        <span class=\"comment\">//注入过滤器</span></span><br><span class=\"line\">        registration.setFilter(<span class=\"keyword\">new</span> filter1());</span><br><span class=\"line\">        <span class=\"comment\">//拦截规则</span></span><br><span class=\"line\">        registration.addUrlPatterns(<span class=\"string\">\"/*\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//过滤器名称</span></span><br><span class=\"line\">        registration.setName(<span class=\"string\">\"filter1\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//过滤器顺序</span></span><br><span class=\"line\">        registration.setOrder(FilterRegistrationBean.LOWEST_PRECEDENCE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public FilterRegistrationBean outLinkSecurityFilterRegister() &#123;</span><br><span class=\"line\">        FilterRegistrationBean registration = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        <span class=\"comment\">//注入过滤器</span></span><br><span class=\"line\">        registration.setFilter(<span class=\"keyword\">new</span> filter2());</span><br><span class=\"line\">        <span class=\"comment\">//拦截规则</span></span><br><span class=\"line\">        registration.addUrlPatterns(<span class=\"string\">\"/*\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//过滤器名称</span></span><br><span class=\"line\">        registration.setName(<span class=\"string\">\"filter2\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//过滤器顺序</span></span><br><span class=\"line\">        registration.setOrder(FilterRegistrationBean.LOWEST_PRECEDENCE - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-注解-WebFilter\"><a href=\"#2-注解-WebFilter\" class=\"headerlink\" title=\"2)注解@WebFilter\"></a>2)注解@WebFilter</h2><p>1、在启动类上增加@ServletComponentScan注解，自动扫描带有过滤器注解的包　　　　　　<br> 2、在类上使用@WebFilter和@Order组合实现</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  package com.lixin.study.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.annotation.Order;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">@WebFilter(filterName=<span class=\"string\">\"filter3\"</span>,urlPatterns= &#123;<span class=\"string\">\"/*\"</span>&#125;)</span><br><span class=\"line\">@Order(FilterRegistrationBean.LOWEST_PRECEDENCE)</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">filter3</span> <span class=\"title\">implements</span> <span class=\"title\">Filter</span></span>&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第三个过滤器创建\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第三个过滤器执行\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> destroy() &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"第三个过滤器销毁\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","next":{"title":"Hello World","slug":"hello-world"},"link":"http://starlx.cn/post/filter过滤器/","toc":[{"title":"1.简介","id":"1-简介","index":"1"},{"title":"2.功能","id":"2-功能","index":"2"},{"title":"3.filter 链","id":"3-filter-链","index":"3"},{"title":"4.spring boot配置filter","id":"4-spring-boot配置filter","index":"4","children":[{"title":"1)FilterRegistrationBean的方式","id":"1-FilterRegistrationBean的方式","index":"4.1"},{"title":"2)注解@WebFilter","id":"2-注解-WebFilter","index":"4.2"}]}]}