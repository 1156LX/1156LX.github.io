{"title":"Listener监听器","date":"2019-04-13T14:59:40.000Z","slug":"Listener监听器","updated":"2019-04-13T15:00:51.329Z","content":"<h1 id=\"一-介绍\"><a href=\"#一-介绍\" class=\"headerlink\" title=\"一.介绍\"></a>一.介绍</h1><p>web监听器是一种Servlet中的特殊的类，它们能帮助开发者监听web中的特定事件，比如ServletContext,HttpSession,ServletRequest的创建和销毁；变量的创建、销毁和修改等。可以在某些动作前后增加处理，实现监控。</p>\n<h1 id=\"二-作用\"><a href=\"#二-作用\" class=\"headerlink\" title=\"二.作用\"></a>二.作用</h1><ul>\n<li>通常使用Web监听器做以下的内容：</li>\n<li>统计在线人数，利用HttpSessionLisener</li>\n<li>加载初始化信息：利用ServletContextListener</li>\n<li>统计网站访问量</li>\n<li>实现访问监控</li>\n</ul>\n<h1 id=\"三-监听器的分类\"><a href=\"#三-监听器的分类\" class=\"headerlink\" title=\"三.监听器的分类\"></a>三.监听器的分类</h1><h6 id=\"1-ServletContext监控：对应监控application内置对象的创建和销毁。\"><a href=\"#1-ServletContext监控：对应监控application内置对象的创建和销毁。\" class=\"headerlink\" title=\"1)ServletContext监控：对应监控application内置对象的创建和销毁。\"></a>1)ServletContext监控：对应监控application内置对象的创建和销毁。</h6><p>当web容器开启时，执行contextInitialized方法；当容器关闭或重启时，执行contextDestroyed方法。<br>实现方式：直接实现ServletContextListener接口：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServletContextListener</span> <span class=\"title\">implements</span> <span class=\"title\">ServletContextListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"keyword\">void</span> contextDestroyed(ServletContextEvent sce) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> contextInitialized(ServletContextEvent sce) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"2-HttpSession监控：对应监控session内置对象的创建和销毁。\"><a href=\"#2-HttpSession监控：对应监控session内置对象的创建和销毁。\" class=\"headerlink\" title=\"2)HttpSession监控：对应监控session内置对象的创建和销毁。\"></a>2)HttpSession监控：对应监控session内置对象的创建和销毁。</h6><p>当打开一个新的页面时，开启一个session会话，执行sessionCreated方法；当页面关闭session过期时，或者容器关闭销毁时，执行sessionDestroyed方法。<br>实现方式：直接实现HttpSessionListener接口：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHttpSessionListener</span> <span class=\"title\">implements</span> <span class=\"title\">HttpSessionListener</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public <span class=\"keyword\">void</span> sessionCreated(HttpSessionEvent arg0) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> sessionDestroyed(HttpSessionEvent arg0) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"3-ServletRequest监控：对应监控request内置对象的创建和销毁。\"><a href=\"#3-ServletRequest监控：对应监控request内置对象的创建和销毁。\" class=\"headerlink\" title=\"3)ServletRequest监控：对应监控request内置对象的创建和销毁。\"></a>3)ServletRequest监控：对应监控request内置对象的创建和销毁。</h6><p>当访问某个页面时，出发一个request请求，执行requestInitialized方法；当页面关闭时，执行requestDestroyed方法。<br>实现方式，直接实现ServletRequestListener接口：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServletRequestListener</span> <span class=\"title\">implements</span> <span class=\"title\">ServletRequestListener</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public <span class=\"keyword\">void</span> requestDestroyed(ServletRequestEvent arg0) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> requestInitialized(ServletRequestEvent arg0) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"四-扩展\"><a href=\"#四-扩展\" class=\"headerlink\" title=\"四.扩展\"></a>四.扩展</h1><h6 id=\"1）从获取到数据的来源来说：\"><a href=\"#1）从获取到数据的来源来说：\" class=\"headerlink\" title=\"1）从获取到数据的来源来说：\"></a>1）从获取到数据的来源来说：</h6><p>1.getAttribtue获取到的是web容器中的值，比如：<br>我们在Servlet中通过setAttribute设定某个值，这个值存在于容器中，就可以通过getAttribute方法获取；</p>\n<p>2.getParameter获取到的是通过http传来的值，比如这样一个http请求：<br>http:localhost:8080/test/test.html?username=xingoo<br>还有其他的GET和POST方式，都可以通过getParameter来获取。</p>\n<h6 id=\"2）从获取到的数据类型来说：\"><a href=\"#2）从获取到的数据类型来说：\" class=\"headerlink\" title=\"2）从获取到的数据类型来说：\"></a>2）从获取到的数据类型来说：</h6><p>1.getAttribute返回的是一个对象，Object。</p>\n<p>2.getParameter返回的是，前面页面中某个表单或者http后面参数传递的值，是个字符串。</p>\n","prev":{"title":"Springboot之引入Thymeleaf","slug":"Springboot之引入Thymeleaf"},"next":{"title":"Interceptor拦截器","slug":"Interceptor拦截器"},"link":"http://starlx.cn/post/Listener监听器/","toc":[{"title":"一.介绍","id":"一-介绍","index":"1"},{"title":"二.作用","id":"二-作用","index":"2"},{"title":"三.监听器的分类","id":"三-监听器的分类","index":"3"},{"title":"四.扩展","id":"四-扩展","index":"4"}]}