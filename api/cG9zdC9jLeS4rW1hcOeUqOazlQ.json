{"title":"c++中map用法","date":"2018-11-21T04:38:00.000Z","slug":"c-中map用法","updated":"2018-11-21T05:35:04.438Z","content":"<body bgcolor=\"#FFFFF0\"><br>## 1、map简介<br>map是一类关联式容器。它的特点是增加和删除节点对迭代器的影响很小，除了那个操作节点，对其他的节点都没有什么影响。<br>对于迭代器来说，可以修改实值，而不能修改key。<br><br>## 2、map的功能<br>自动建立Key － value的对应。key 和 value可以是任意你需要的类型。<br>根据key值快速查找记录，查找的复杂度基本是Log(N)，如果有1000个记录，最多查找10次，1,000,000个记录，最多查找20次。<br>快速插入Key -Value 记录。<br>快速删除记录<br>根据Key 修改value记录。<br>遍历所有记录。<br>## 3、使用map<br>使用map得包含map类所在的头文件<br>#include <map><br><br>## 4、利用数组方式插入数据<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;map&gt;  </span><br><span class=\"line\">#include &lt;string&gt;  </span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;  </span><br><span class=\"line\">int main()  </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    map&lt;int, string&gt; mapStudent;  </span><br><span class=\"line\">    mapStudent[<span class=\"number\">1</span>] = <span class=\"string\">\"student_one\"</span>;  </span><br><span class=\"line\">    mapStudent[<span class=\"number\">2</span>] = <span class=\"string\">\"student_two\"</span>;  </span><br><span class=\"line\">    mapStudent[<span class=\"number\">3</span>] = <span class=\"string\">\"student_three\"</span>;  </span><br><span class=\"line\">    map&lt;int, string&gt;::iterator iter;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(iter = mapStudent.begin(); iter != mapStudent.end(); iter++)  </span><br><span class=\"line\">        cout&lt;&lt;iter-&gt;first&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;iter-&gt;second&lt;&lt;endl;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><br>## 5、    查找并获取map中的元素<br><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> map&lt;int, string&gt;::iterator iter;  </span><br><span class=\"line\"> iter = mapStudent.find(<span class=\"number\">1</span>); </span><br><span class=\"line\"><span class=\"keyword\">if</span>(iter != mapStudent.end())  </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">\"Find, the value is \"</span>&lt;&lt;iter-&gt;second&lt;&lt;endl;  </span><br><span class=\"line\"> <span class=\"keyword\">else</span>  </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">\"Do not Find\"</span>&lt;&lt;endl;</span><br></pre></td></tr></table></figure><br><br><br>## 6、 从map中删除元素<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int n = mapStudent.erase(<span class=\"number\">1</span>);<span class=\"comment\">//如果删除了会返回1，否则返回0 </span></span><br><span class=\"line\">mapStudent.clear();<span class=\"comment\">//清空</span></span><br></pre></td></tr></table></figure><br><br>## 7、  排序 ·  map中的sort问题<br><br>map中的元素是自动按Key升序排序，所以不能对map用sort函数；<br><br>#### 对有序map中的value排序<br>把map中的元素放到序列容器（如vector）中，再用sort进行排序。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;algorithm&gt;</span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include&lt;string&gt;</span><br><span class=\"line\">#include&lt;map&gt;</span><br><span class=\"line\">#include &lt;functional&gt; // std::greater</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">bool cmp(<span class=\"keyword\">const</span> pair&lt;string, int&gt;&amp; a, <span class=\"keyword\">const</span> pair&lt;string, int&gt;&amp; b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.second &lt; b.second;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、map这里指定less作为其默认比较函数(对象),就是默认按键值升序排列</span></span><br><span class=\"line\">    map&lt;string, int&gt; name_score_map;</span><br><span class=\"line\">    name_score_map[<span class=\"string\">\"LiMin\"</span>] = <span class=\"number\">90</span>;</span><br><span class=\"line\">    name_score_map[<span class=\"string\">\"ZiLinMi\"</span>] = <span class=\"number\">79</span>;</span><br><span class=\"line\">    name_score_map[<span class=\"string\">\"BoB\"</span>] = <span class=\"number\">92</span>;</span><br><span class=\"line\">    name_score_map.insert(make_pair(<span class=\"string\">\"Bing\"</span>, <span class=\"number\">99</span>));</span><br><span class=\"line\">    name_score_map.insert(make_pair(<span class=\"string\">\"Albert\"</span>, <span class=\"number\">86</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//输出添加的内容</span></span><br><span class=\"line\">    map&lt;string, int&gt;::iterator iter;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (iter = name_score_map.begin(); iter != name_score_map.end(); ++iter) &#123;</span><br><span class=\"line\">        cout &lt;&lt; (*iter).first &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将map中的内容转存到vector中</span></span><br><span class=\"line\">    vector&lt;pair&lt;string, int&gt;&gt; vec(name_score_map.begin(), name_score_map.end());</span><br><span class=\"line\">    <span class=\"comment\">//对线性的vector进行排序</span></span><br><span class=\"line\">    sort(vec.begin(), vec.end(), cmp);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">0</span>; i &lt; vec.size(); ++i)</span><br><span class=\"line\">        cout &lt;&lt; vec[i].first &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><br>## 8、map的基本操作函数：<br><br>     begin()         返回指向map头部的迭代器<br>     clear(）        删除所有元素<br>     count()         返回指定元素出现的次数<br>     empty()         如果map为空则返回true<br>     end()           返回指向map末尾的迭代器<br>     equal_range()   返回特殊条目的迭代器对<br>     erase()         删除一个元素<br>     find()          查找一个元素<br>     get_allocator() 返回map的配置器<br>     insert()        插入元素<br>     key_comp()      返回比较元素key的函数<br>     lower_bound()   返回键值&gt;=给定元素的第一个位置<br>     max_size()      返回可以容纳的最大元素个数<br>     rbegin()        返回一个指向map尾部的逆向迭代器<br>     rend()          返回一个指向map头部的逆向迭代器<br>     size()          返回map中元素的个数<br>     swap()           交换两个map<br>     upper_bound()    返回键值&gt;给定元素的第一个位置<br>     value_comp()     返回比较元素value的函数<br><br><br></map><script src=\"/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887\"></script><script>L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});</script></body>","next":{"title":"spring boot使用AOP","slug":"spring-boot使用AOP"},"link":"http://starlx.cn/post/c-中map用法/"}