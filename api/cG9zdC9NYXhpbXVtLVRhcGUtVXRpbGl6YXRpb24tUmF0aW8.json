{"title":"Maximum Tape Utilization Ratio","date":"2019-06-14T06:56:22.000Z","slug":"Maximum-Tape-Utilization-Ratio","updated":"2019-06-14T07:19:31.205Z","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>设有n 个程序{1,2,…, n }要存放在长度为L的磁带上。程序i存放在磁带上的长度是li ，1 &lt; = i &lt; = n。  程序存储问题要求确定这n 个程序在磁带上的一个存储方案，使得能够在磁带上存储尽可能多的程序。在保证存储最多程序的前提下还要求磁带的利用率达到最大。  对于给定的n个程序存放在磁带上的长度，编程计算磁带上最多可以存储的程序数和占用磁带的长度。</p>\n<h3 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一行是2 个正整数，分别表示文件个数n &lt;=600和磁带的长度L&lt;=6000。</span><br><span class=\"line\">接下来的1 行中，有n个正整数，表示程序存放在磁带上的长度。</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第1 行输出最多可以存储的程序数和占用磁带的长度；</span><br><span class=\"line\">第2行输出存放在磁带上的每个程序的长度。</span><br></pre></td></tr></table></figure>\n<h3 id=\"样例输入\"><a href=\"#样例输入\" class=\"headerlink\" title=\"样例输入\"></a>样例输入</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9 50</span><br><span class=\"line\">2 3 13 8 80 20 21 22 23</span><br></pre></td></tr></table></figure>\n<h3 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 49</span><br><span class=\"line\">2 3 13 8 23</span><br></pre></td></tr></table></figure>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p><strong>我们开一个结构体存三个信息：可存程序个数，磁带占用长度，所有的程序</strong></p>\n<ul>\n<li>dp[j].count    表示磁带长度为j最多可以存的程序的个数</li>\n<li>dp[j].sumv    表示磁带长度为j最多可以占用的磁带长度</li>\n<li>dp[j].pre       表示存了count个程序的每个程序占用的磁带长度</li>\n</ul>\n<p><strong>首先我们要满足储存的程序数最多那么如果满足：<font color=\"#DC143C\" size=\"3\" face=\"黑体\">dp[j].count &lt; dp[j - s].count + 1</font>，可更新数据。<br>当储存程序相同的时候，我们需要满足：<font color=\"#DC143C\" size=\"3\" face=\"黑体\">dp[j].sumv &lt;= (dp[j - s].sumv + s)</font>，即程序数目相同的情况下，需要最大的磁带占用率，如果满足更新数据。</strong></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>     </span><br><span class=\"line\">   <span class=\"keyword\">int</span> count;<span class=\"comment\">//程序数目     </span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> sum;<span class=\"comment\">//程序所占的长度     </span></span><br><span class=\"line\">   <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;pre;<span class=\"comment\">//count个程序     </span></span><br><span class=\"line\">   node()     </span><br><span class=\"line\">     &#123;          </span><br><span class=\"line\">       count=<span class=\"number\">0</span>;          </span><br><span class=\"line\">       sum=<span class=\"number\">0</span>;          </span><br><span class=\"line\">       pre.clear();     </span><br><span class=\"line\">      &#125; </span><br><span class=\"line\">&#125;dp[<span class=\"number\">6005</span>]; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;     </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,l[<span class=\"number\">605</span>];     </span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;     </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)         </span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;l[i];     <span class=\"comment\">//要倒叙，因为是用的栈     </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)    </span><br><span class=\"line\">    &#123;         </span><br><span class=\"line\">          <span class=\"keyword\">int</span> k=l[i];        </span><br><span class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=m;j&gt;=<span class=\"number\">0</span>;j--)         </span><br><span class=\"line\">          &#123;            </span><br><span class=\"line\">               <span class=\"keyword\">if</span>(j-k&gt;=<span class=\"number\">0</span>)             </span><br><span class=\"line\">               &#123;                </span><br><span class=\"line\">                     <span class=\"keyword\">if</span>(dp[j].count&lt;dp[j-k].count+<span class=\"number\">1</span>||dp[j].count==dp[j-k].count+<span class=\"number\">1</span>&amp;&amp;dp[j].sum&lt;=dp[j-k].sum+k)                 </span><br><span class=\"line\">                     &#123;                     </span><br><span class=\"line\">                          dp[j].count=dp[j-k].count+<span class=\"number\">1</span>;                     </span><br><span class=\"line\">                          dp[j].sum=dp[j-k].sum+k;                     </span><br><span class=\"line\">\t\t\t\t\t\t  dp[j].pre=dp[j-k].pre;                     </span><br><span class=\"line\">                          dp[j].pre.push_back(k);                 </span><br><span class=\"line\">                      &#125;             </span><br><span class=\"line\">                &#125;         </span><br><span class=\"line\">          &#125;     </span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;dp[m].count&lt;&lt;<span class=\"string\">' '</span>&lt;&lt;dp[m].sum&lt;&lt;<span class=\"built_in\">endl</span>;     </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=dp[m].pre.size()<span class=\"number\">-1</span>;i&gt;<span class=\"number\">0</span>;i--)     </span><br><span class=\"line\">    &#123;         </span><br><span class=\"line\">         <span class=\"built_in\">cout</span>&lt;&lt;dp[m].pre[i]&lt;&lt;<span class=\"string\">' '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;dp[m].pre[<span class=\"number\">0</span>]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"python学习-数组","slug":"python学习-数组"},"next":{"title":"Independent Task Scheduling（独立任务最优调度问题）","slug":"Independent-Task-Scheduling（独立任务最优调度问题）"},"link":"http://starlx.cn/post/Maximum-Tape-Utilization-Ratio/","toc":[{"title":"题目","id":"题目","index":"1","children":[{"title":"思路","id":"思路","index":"1.1"},{"title":"代码","id":"代码","index":"1.2"}]}]}