{"title":"Interceptor拦截器","date":"2019-04-13T12:38:17.000Z","slug":"Interceptor拦截器","updated":"2019-04-13T12:41:58.981Z","content":"<h1 id=\"一-简介\"><a href=\"#一-简介\" class=\"headerlink\" title=\"一.简介\"></a>一.简介</h1><p>拦截器，在AOP（Aspect-Oriented Programming）中用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。拦截是AOP的一种实现策略。</p>\n<p>拦截器是动态拦截Action调用的对象。它提供了一种机制可以使开发者可以定义在一个action执行的前后执行的代码，也可以在一个action执行前阻止其执行。同时也是提供了一种可以提取action中可重用的部分的方式。 </p>\n<h1 id=\"二-拦截器与过滤器的区别-：\"><a href=\"#二-拦截器与过滤器的区别-：\" class=\"headerlink\" title=\"二.拦截器与过滤器的区别 ：\"></a>二.拦截器与过滤器的区别 ：</h1><pre><code>1. 拦截器是基于java的反射机制的，而过滤器是基于函数回调。\n\n2. 拦截器不依赖与servlet容器，过滤器依赖与servlet容器。 \n\n3. 拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。\n\n4. 拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。 \n\n5. 在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次\n</code></pre><h1 id=\"三-spring-boot-配置\"><a href=\"#三-spring-boot-配置\" class=\"headerlink\" title=\"三.spring boot 配置\"></a>三.spring boot 配置</h1><h6 id=\"1-注册我们自定义的拦截器\"><a href=\"#1-注册我们自定义的拦截器\" class=\"headerlink\" title=\"1) 注册我们自定义的拦截器\"></a>1) 注册我们自定义的拦截器</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppConfig</span> <span class=\"title\">implements</span>  <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//注册自定义拦截器，添加拦截路径和排除拦截路径</span></span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> myInterceptor()).addPathPatterns(<span class=\"string\">\"/*\"</span>).excludePathPatterns(<span class=\"string\">\"api/path/login\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-实现HandlerInterceptor接口，重写接口中的三个方法：\"><a href=\"#2-实现HandlerInterceptor接口，重写接口中的三个方法：\" class=\"headerlink\" title=\"2)实现HandlerInterceptor接口，重写接口中的三个方法：\"></a>2)实现HandlerInterceptor接口，重写接口中的三个方法：</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myInterceptor</span> <span class=\"title\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 进入controller层之前拦截请求</span></span><br><span class=\"line\"><span class=\"comment\">     * @param httpServletRequest</span></span><br><span class=\"line\"><span class=\"comment\">     * @param httpServletResponse</span></span><br><span class=\"line\"><span class=\"comment\">     * @param o</span></span><br><span class=\"line\"><span class=\"comment\">     * @return</span></span><br><span class=\"line\"><span class=\"comment\">     * @throws Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, <span class=\"built_in\">Object</span> o) throws Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------------------开始进入请求地址拦截----------------------------\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, <span class=\"built_in\">Object</span> o, ModelAndView modelAndView) throws Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"--------------处理请求完成后视图渲染之前的处理操作---------------\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, <span class=\"built_in\">Object</span> o, Exception e) throws Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"---------------视图渲染之后的操作-------------------------0\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"Listener监听器","slug":"Listener监听器"},"next":{"title":"filter过滤器","slug":"filter过滤器"},"link":"http://starlx.cn/post/Interceptor拦截器/","toc":[{"title":"一.简介","id":"一-简介","index":"1"},{"title":"二.拦截器与过滤器的区别 ：","id":"二-拦截器与过滤器的区别-：","index":"2"},{"title":"三.spring boot 配置","id":"三-spring-boot-配置","index":"3"}]}