{"title":"C++中set用法","date":"2019-04-15T13:07:11.000Z","slug":"C-中set用法","updated":"2019-04-15T13:08:56.030Z","content":"<h1 id=\"一-关于set\"><a href=\"#一-关于set\" class=\"headerlink\" title=\"一.关于set\"></a>一.关于set</h1><p>C++ STL 之所以得到广泛的赞誉，也被很多人使用，不只是提供了像vector, string, list等方便的容器，更重要的是STL封装了许多复杂的数据结构算法和大量常用数据结构操作。vector封装数组，list封装了链表，map和set封装了二叉树等，在封装这些数据结构的时候，STL按照程序员的使用习惯，以成员函数方式提供的常用操作，如：插入、排序、删除、查找等。让用户在STL使用过程中，并不会感到陌生。</p>\n<h1 id=\"二-特点\"><a href=\"#二-特点\" class=\"headerlink\" title=\"二.特点\"></a>二.特点</h1><ul>\n<li>map和set的插入删除效率比用其他序列容器高</li>\n<li>每次insert之后，以前保存的iterator不会失效</li>\n<li><p>当数据元素增多时，set的插入和搜索速度变化不大（二分查找）</p>\n<h1 id=\"三-set中常用的方法\"><a href=\"#三-set中常用的方法\" class=\"headerlink\" title=\"三.set中常用的方法\"></a>三.set中常用的方法</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> begin()     　　 ,返回set容器的第一个元素</span><br><span class=\"line\">end() 　　　　 ,返回set容器的最后一个元素</span><br><span class=\"line\">clear()   　　     ,删除set容器中的所有的元素</span><br><span class=\"line\">empty() 　　　,判断set容器是否为空</span><br><span class=\"line\">max_size() 　 ,返回set容器可能包含的元素最大个数</span><br><span class=\"line\">size() 　　　　 ,返回当前set容器中的元素个数</span><br><span class=\"line\">rbegin　　　　 ,返回的值和end()相同</span><br><span class=\"line\">rend()　　　　 ,返回的值和rbegin()相同</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"四-例题应用\"><a href=\"#四-例题应用\" class=\"headerlink\" title=\"四.例题应用\"></a>四.例题应用</h1><h6 id=\"乌龟与洞穴\"><a href=\"#乌龟与洞穴\" class=\"headerlink\" title=\"乌龟与洞穴\"></a>乌龟与洞穴</h6><p>Description<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">辽阔的太平洋上有一个十分美丽的岛。</span><br><span class=\"line\"></span><br><span class=\"line\">岛的海岸上有 n 个洞穴呈环形分布（从逆时针编号0到n−1），有一只乌龟生活在岛上，它早上都会外出觅食，晚上都会回到岛上，然后寻找洞穴睡觉。但是，这只乌龟不会去寻找之前睡过的洞穴入睡，因此每天都需要消耗大量的时间去寻找洞穴。</span><br><span class=\"line\"></span><br><span class=\"line\">现在给你 n 天晚上乌龟回来的洞穴位置，你能帮助它寻找每天入睡的洞穴吗？注意：乌龟只会沿逆时针寻找洞穴。</span><br></pre></td></tr></table></figure></p>\n<p>Input<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一行包含一个整数 T (1≤T≤1000)T (1≤T≤1000) 代表测试组数，对于每一组测试：</span><br><span class=\"line\"></span><br><span class=\"line\">第一行一个整数 nn (1≤n≤105)(1≤n≤105) 表示洞穴的个数以及总共的天数 。</span><br><span class=\"line\"></span><br><span class=\"line\">第二行 nn 个整数 aiai (0≤ai≤n−1)(0≤ai≤n−1)  表示第 ii 天回来的洞穴位置。</span><br><span class=\"line\"></span><br><span class=\"line\">数据保证所有测试中 n的和不超过 10的6次方。</span><br></pre></td></tr></table></figure></p>\n<p>Output<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对于每组测试，输出一行，包含 n 个整数，第 i个整数表示第 i天乌龟入睡的洞穴的编号。</span><br></pre></td></tr></table></figure></p>\n<p>输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">6</span><br><span class=\"line\">4 5 5 0 4 3</span><br><span class=\"line\">4</span><br><span class=\"line\">1 1 1 1</span><br></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 5 0 1 2 3</span><br><span class=\"line\">1 2 3 0</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            s.insert(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;x);</span><br><span class=\"line\">            <span class=\"comment\">//lower_bound()--返回指向大于（或等于）某值的第一个元素的迭代器</span></span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it = s.lower_bound(x);</span><br><span class=\"line\">            <span class=\"comment\">//s.end()没有值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it == s.end()) &#123;</span><br><span class=\"line\">                it = s.begin();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d%c\"</span>, *it, <span class=\"string\">\" \\n\"</span>[n == <span class=\"number\">0</span>]);</span><br><span class=\"line\">            s.erase(it);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"凸包面积——Graham扫描法","slug":"凸包面积——Graham扫描法"},"next":{"title":"Springboot之引入Thymeleaf","slug":"Springboot之引入Thymeleaf"},"link":"http://starlx.cn/post/C-中set用法/","toc":[{"title":"一.关于set","id":"一-关于set","index":"1"},{"title":"二.特点","id":"二-特点","index":"2"},{"title":"三.set中常用的方法","id":"三-set中常用的方法","index":"3"},{"title":"四.例题应用","id":"四-例题应用","index":"4"}]}